# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
- name: org_id
  value: "752089912425"
- name: billing_account
  value: "013B19-B6B12E-6CC016"
- name: org_admins
  value: "group_org_admins@gcp-lz-endava.com"
- name: billing_admins
  value: "group_billing_admins@gcp-lz-endava.com"
- name: monitoring_email
  value: "group_org_admins@gcp-lz-endava.com"
- name: region
  value: "europe-west2"
- name: folder_prefix
  value: "abd"
- name: project_prefix
  value: "abd"
- name: parent_folder
  value: "858785730807"
- name: vet_projectid
  value: "azuredevops-orgadmin"
- name: service_account
  value: "prasanna-orgadmin-ado@azuredevops-orgadmin.iam.gserviceaccount.com"
- name: scc
  value: "abx1-notify"

steps:
- task: DownloadSecureFile@1
  name: GCPCredentials
  displayName: 'Download credentials.json'
  inputs:
    secureFile: 'credentials.json'
    
- script: |
    cd $(Agent.BuildDirectory)/
    cp $(GCPCredentials.secureFilePath) $(Agent.BuildDirectory)/
    gcloud auth activate-service-account --key-file=$(Agent.BuildDirectory)/credentials.json
    export GOOGLE_APPLICATION_CREDENTIALS=$(Agent.BuildDirectory)/credentials.json
    git clone https://github.com/fariasyed/terraform-example-foundation
    gcloud organizations add-iam-policy-binding 752089912425 --member='serviceAccount:prasanna-orgadmin-ado@azuredevops-orgadmin.iam.gserviceaccount.com' --role='roles/billing.admin' --condition=None
    gcloud organizations add-iam-policy-binding 752089912425 --member='serviceAccount:prasanna-orgadmin-ado@azuredevops-orgadmin.iam.gserviceaccount.com' --role='roles/resourcemanager.folderAdmin'  --condition=None
    gcloud organizations add-iam-policy-binding 752089912425 --member='serviceAccount:prasanna-orgadmin-ado@azuredevops-orgadmin.iam.gserviceaccount.com' --role='roles/resourcemanager.projectCreator'  --condition=None
    gcloud organizations add-iam-policy-binding 752089912425 --member='serviceAccount:prasanna-orgadmin-ado@azuredevops-orgadmin.iam.gserviceaccount.com' --role='roles/iam.securityAdmin' --condition=None
    gcloud organizations add-iam-policy-binding 752089912425 --member='serviceAccount:prasanna-orgadmin-ado@azuredevops-orgadmin.iam.gserviceaccount.com' --role='roles/accesscontextmanager.policyAdmin' --condition=None
    gcloud organizations add-iam-policy-binding 752089912425 --member='serviceAccount:prasanna-orgadmin-ado@azuredevops-orgadmin.iam.gserviceaccount.com' --role='roles/owner' --condition=None
    gcloud organizations add-iam-policy-binding 752089912425 --member='serviceAccount:prasanna-orgadmin-ado@azuredevops-orgadmin.iam.gserviceaccount.com' --role='roles/essentialcontacts.admin' --condition=None
    gcloud organizations add-iam-policy-binding 752089912425 --member='serviceAccount:prasanna-orgadmin-ado@azuredevops-orgadmin.iam.gserviceaccount.com' --role='roles/resourcemanager.folderCreator' --condition=None
    gcloud organizations add-iam-policy-binding 752089912425 --member='serviceAccount:prasanna-orgadmin-ado@azuredevops-orgadmin.iam.gserviceaccount.com' --role='roles/resourcemanager.folderIamAdmin' --condition=None
    gcloud organizations add-iam-policy-binding 752089912425 --member='serviceAccount:prasanna-orgadmin-ado@azuredevops-orgadmin.iam.gserviceaccount.com' --role='roles/orgpolicy.policyAdmin' --condition=None
    gcloud organizations add-iam-policy-binding 752089912425 --member='serviceAccount:prasanna-orgadmin-ado@azuredevops-orgadmin.iam.gserviceaccount.com' --role='roles/source.admin' --condition=None
    gcloud organizations add-iam-policy-binding 752089912425 --member='serviceAccount:prasanna-orgadmin-ado@azuredevops-orgadmin.iam.gserviceaccount.com' --role='roles/billing.projectManager' --condition=None
    gcloud components install beta --quiet
    cd terraform-example-foundation
    cd 0-bootstrap
    mv terraform.example.tfvars terraform.tfvars
    echo '''
    org_id = "${{ variables.org_id }}"
    billing_account = "${{ variables.billing_account }}"
    group_org_admins = "${{ variables.org_admins }}"
    group_billing_admins = "${{ variables.billing_admins }}"
    default_region = "europe-west2"
    parent_folder = "${{ variables.parent_folder }}"
    project_prefix = "${{ variables.project_prefix }}"
    folder_prefix = "${{ variables.folder_prefix }}"
    ''' > terraform.tfvars
    terraform init
    terraform plan -input=false -out bootstrap.tfplan
    export VET_PROJECT_ID=A-VALID-PROJECT-ID
    terraform show -json bootstrap.tfplan > bootstrap.json
    gcloud beta terraform vet bootstrap.json --policy-library="../policy-library" --project ${VET_PROJECT_ID}
    terraform apply bootstrap.tfplan
    export network_step_sa=$(terraform output -raw networks_step_terraform_service_account_email)
    export projects_step_sa=$(terraform output -raw projects_step_terraform_service_account_email)
    export projects_gcs_bucket_tfstate=$(terraform output -raw projects_gcs_bucket_tfstate)

    echo "network step service account = ${network_step_sa}"
    echo "projects step service account = ${projects_step_sa}"
    echo "projects gcs bucket tfstate = ${projects_gcs_bucket_tfstate}"

    export cloudbuild_project_id=$(terraform output -raw cloudbuild_project_id)
    echo "cloud build project ID = ${cloudbuild_project_id}"
    export backend_bucket=$(terraform output -raw gcs_bucket_tfstate)
    echo "backend_bucket = ${backend_bucket}"
    export backend_bucket_projects=$(terraform output -raw projects_gcs_bucket_tfstate)
    echo "backend_bucket_projects = ${backend_bucket_projects}"
    cp backend.tf.example backend.tf
    cd ..
    for i in `find -name 'backend.tf'`; do sed -i "s/UPDATE_ME/${backend_bucket}/" $i; done
    for i in `find -name 'backend.tf'`; do sed -i "s/UPDATE_PROJECTS_BACKEND/${backend_bucket_projects}/" $i; done
    cd 0-bootstrap
    terraform init -force-copy
    cd ../..
    gcloud source repos clone gcp-bootstrap --project=${cloudbuild_project_id}
    cd gcp-bootstrap
    git config --global user.email "prasanna.veerabhadraiahgcp-lz-endava.com"
    git config --global user.name "Prasanna Veerabhadraiah"
    git checkout -b production
    cp -RT ../terraform-example-foundation/0-bootstrap/ .
    git add .
    git commit -m 'Initialize bootstrap'
    git push --set-upstream origin production
    cd $(Agent.BuildDirectory)/
    tar cvf terraform-example-foundation.tar terraform-example-foundation
    gsutil -m cp terraform-example-foundation.tar gs://terraformexamplefoundation/
    rm -rf terraform-example-foundation.tar terraform-example-foundation
  workingDirectory: $(Agent.BuildDirectory)/
  displayName: 'Running Bootstrap Layer'
